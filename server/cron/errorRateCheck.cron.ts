// server/cron/errorRateCheck.cron.ts
import { defineCronHandler } from '#nuxt/cron'
import { ofetch } from 'ofetch'
import mongoose from 'mongoose'
import { subMinutes } from 'date-fns' // C·∫ßn h√†m n√†y

// S·ª≠ d·ª•ng l·∫°i ALERT_COOLDOWN t·ª´ monitorCheck (ho·∫∑c ƒë·ªãnh nghƒ©a l·∫°i ·ªü ƒë√¢y)
const ALERT_COOLDOWN = 5 * 60 * 1000 // 5 ph√∫t

// Kho·∫£ng th·ªùi gian ƒë·ªÉ t√≠nh t·ª∑ l·ªá l·ªói (v√≠ d·ª•: 10 ph√∫t)
const ERROR_RATE_WINDOW_MINUTES = 10

export default defineCronHandler(
  // Ch·∫°y m·ªói 5 ph√∫t (v√≠ d·ª•)
  () => '*/5 * * * *',
  async () => {
    console.log('[Cron ErrorRate] B·∫Øt ƒë·∫ßu ki·ªÉm tra t·ª∑ l·ªá l·ªói...')

    // 1. T√¨m t·∫•t c·∫£ monitors C√ì c·∫•u h√¨nh errorRateThreshold
    const monitorsToCheck = await Monitor.find({
      'status': 'ACTIVE', // Ch·ªâ check monitor ƒëang ho·∫°t ƒë·ªông
      'alertConfig.errorRateThreshold': { $exists: true, $ne: null }
    })
      .select('_id name endpoint alertConfig lastAlertedAt') // L·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
      .lean()

    if (monitorsToCheck.length === 0) {
      console.log('[Cron ErrorRate] Kh√¥ng c√≥ monitor n√†o c·∫•u h√¨nh c·∫£nh b√°o t·ª∑ l·ªá l·ªói.')
      return
    }

    const alertsToSend: Array<{ monitor: any, details: string }> = []
    const monitorsToUpdateLastAlerted: string[] = []
    const now = new Date() // Th·ªùi gian hi·ªán t·∫°i

    // 2. L·∫∑p qua t·ª´ng monitor ƒë·ªÉ ki·ªÉm tra
    for (const monitor of monitorsToCheck) {
      const threshold = monitor.alertConfig.errorRateThreshold
      if (threshold === null || threshold === undefined) continue // B·ªè qua n·∫øu kh√¥ng c√≥ ng∆∞·ª°ng

      // Ki·ªÉm tra cooldown
      const lastAlertTime = monitor.alertConfig.lastAlertedAt ? new Date(monitor.alertConfig.lastAlertedAt).getTime() : 0
      const canAlert = !lastAlertTime || (now.getTime() - lastAlertTime > ALERT_COOLDOWN)

      if (!canAlert) {
        // console.log(`[Cron ErrorRate] B·ªè qua ${monitor.name} do ƒëang trong cooldown.`);
        continue // B·ªè qua monitor n√†y n·∫øu ƒëang cooldown
      }

      // T√≠nh th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu c·ª≠a s·ªï th·ªùi gian (vd: 10 ph√∫t tr∆∞·ªõc)
      const windowStartTime = subMinutes(now, ERROR_RATE_WINDOW_MINUTES)

      // 3. Truy v·∫•n CSDL ƒë·ªÉ l·∫•y k·∫øt qu·∫£ trong kho·∫£ng th·ªùi gian
      try {
        const resultsInWindow = await Result.aggregate([
          {
            $match: {
              'meta.monitorId': monitor._id,
              'timestamp': { $gte: windowStartTime }
            }
          },
          {
            $group: {
              _id: null,
              totalChecks: { $sum: 1 },
              totalDown: { $sum: { $cond: ['$isUp', 0, 1] } } // ƒê·∫øm s·ªë l·∫ßn isUp = false
            }
          }
        ])

        if (resultsInWindow.length === 0 || resultsInWindow[0].totalChecks === 0) {
          // console.log(`[Cron ErrorRate] Kh√¥ng c√≥ d·ªØ li·ªáu cho ${monitor.name} trong ${ERROR_RATE_WINDOW_MINUTES} ph√∫t qua.`);
          continue // Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t√≠nh
        }

        const stats = resultsInWindow[0]
        const errorRate = (stats.totalDown / stats.totalChecks) * 100

        // 4. So s√°nh t·ª∑ l·ªá l·ªói v·ªõi ng∆∞·ª°ng
        if (errorRate > threshold) {
          // (M·ªöI) Th√™m v√†o danh s√°ch c·∫£nh b√°o
          const details = `T·ª∑ l·ªá l·ªói l√† ${errorRate.toFixed(1)}% (v∆∞·ª£t ng∆∞·ª°ng ${threshold}%) trong ${ERROR_RATE_WINDOW_MINUTES} ph√∫t qua (${stats.totalDown}/${stats.totalChecks} l·∫ßn l·ªói).`
          alertsToSend.push({ monitor, details })

          // ƒê√°nh d·∫•u monitor n√†y c·∫ßn c·∫≠p nh·∫≠t lastAlertedAt
          if (!monitorsToUpdateLastAlerted.includes(monitor._id.toString())) {
            monitorsToUpdateLastAlerted.push(monitor._id.toString())
          }
        }
        // else {
        //   console.log(`[Cron ErrorRate] T·ª∑ l·ªá l·ªói c·ªßa ${monitor.name} l√† ${errorRate.toFixed(1)}% (d∆∞·ªõi ng∆∞·ª°ng ${threshold}%).`);
        // }
      } catch (dbError) {
        console.error(`[Cron ErrorRate] L·ªói khi truy v·∫•n DB cho ${monitor.name}:`, dbError)
      }
    } // H·∫øt v√≤ng l·∫∑p for

    // --- G·ª¨I C√ÅC C·∫¢NH B√ÅO T·ª∂ L·ªÜ L·ªñI ---
    if (alertsToSend.length > 0) {
      console.log(`[Cron ErrorRate] ƒêang g·ª≠i ${alertsToSend.length} c·∫£nh b√°o t·ª∑ l·ªá l·ªói...`)
      const alertPromises = alertsToSend.map(async (alert) => {
        const { monitor, details } = alert
        const channels = monitor.alertConfig?.channels || []
        const type = 'T·ª∑ l·ªá l·ªói cao' // Lo·∫°i c·∫£nh b√°o c·ªë ƒë·ªãnh

        for (const channel of channels) {
          try {
            const payload = {
              text: `üö® C·∫£nh b√°o Headless Sentry: [${monitor.name}] ${type}\nChi ti·∫øt: ${details}\nURL: ${monitor.endpoint}`
            }
            await ofetch(channel.url, { method: 'POST', body: payload, headers: { 'Content-Type': 'application/json' }, retry: 0 })
            console.log(`[Cron ErrorRate] ƒê√£ g·ª≠i c·∫£nh b√°o "${type}" cho "${monitor.name}" t·ªõi ${new URL(channel.url).hostname}`)
          } catch (webhookError: any) {
            console.error(`[Cron ErrorRate] L·ªói g·ª≠i webhook t·ªõi ${channel.url} cho "${monitor.name}":`, webhookError.message)
          }
        }
      })
      await Promise.allSettled(alertPromises)

      // --- C·∫≠p nh·∫≠t lastAlertedAt ---
      if (monitorsToUpdateLastAlerted.length > 0) {
        try {
          await Monitor.updateMany(
            { _id: { $in: monitorsToUpdateLastAlerted.map(id => new mongoose.Types.ObjectId(id)) } },
            { $set: { 'alertConfig.lastAlertedAt': new Date() } } // C·∫≠p nh·∫≠t c√πng tr∆∞·ªùng lastAlertedAt
          )
          console.log(`[Cron ErrorRate] ƒê√£ c·∫≠p nh·∫≠t lastAlertedAt cho ${monitorsToUpdateLastAlerted.length} monitors.`)
        } catch (updateError) {
          console.error('[Cron ErrorRate] L·ªói c·∫≠p nh·∫≠t lastAlertedAt:', updateError)
        }
      }
    } else {
      console.log('[Cron ErrorRate] Kh√¥ng c√≥ c·∫£nh b√°o t·ª∑ l·ªá l·ªói n√†o c·∫ßn g·ª≠i.')
    }
  }
)
