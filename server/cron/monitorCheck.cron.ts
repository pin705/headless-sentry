import { defineCronHandler } from '#nuxt/cron'
import { ofetch } from 'ofetch'
import mongoose from 'mongoose'

// Th·ªùi gian cooldown gi·ªØa c√°c c·∫£nh b√°o (t√≠nh b·∫±ng mili gi√¢y)
const ALERT_COOLDOWN = 5 * 60 * 1000 // 5 ph√∫t

export default defineCronHandler(
  () => '*/1 * * * *', // Ch·∫°y m·ªói ph√∫t
  async () => {
    console.log('[Cron] B·∫Øt ƒë·∫ßu ki·ªÉm tra gi√°m s√°t API...')

    // L·∫•y monitors ƒëang active v√† c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
    const monitorsToRun = await Monitor.find({ status: 'ACTIVE' })
      .select('endpoint method httpConfig projectId alertConfig name lastAlertedAt') // ƒê√£ bao g·ªìm projectId
      .lean()

    if (monitorsToRun.length === 0) {
      console.log('[Cron] Kh√¥ng c√≥ monitor n√†o ƒë·ªÉ ki·ªÉm tra.')
      return
    }

    const alertsToSend: Array<{ monitor: any, type: string, details: string }> = []
    const monitorsToUpdateLastAlerted: string[] = []

    const checkPromises = monitorsToRun.map((monitor) => {
      const startTime = Date.now()

      // --- KH·ªûI T·∫†O V√Ä ƒêI·ªÄN fetchOptions ---
      const fetchOptions: any = {
        method: monitor.method as any,
        timeout: 15000, // 15 gi√¢y timeout
        ignoreResponseError: true, // R·∫•t quan tr·ªçng!
        headers: {} // Kh·ªüi t·∫°o headers tr·ªëng
      }

      // 1. X·ª≠ l√Ω Headers
      if (monitor.httpConfig?.headers?.length > 0) {
        fetchOptions.headers = Object.fromEntries(
          monitor.httpConfig.headers.map(h => [h.key, h.value])
        )
      }

      // 2. X·ª≠ l√Ω Body
      if (monitor.httpConfig?.body && monitor.httpConfig?.bodyType !== 'none') {
        fetchOptions.body = monitor.httpConfig.body
        // T·ª± ƒë·ªông th√™m Content-Type n·∫øu l√† JSON v√† ch∆∞a ƒë∆∞·ª£c set
        if (
          monitor.httpConfig.bodyType === 'json'
          && !Object.keys(fetchOptions.headers).some(k => k.toLowerCase() === 'content-type')
        ) {
          fetchOptions.headers['Content-Type'] = 'application/json'
        }
      }
      // --- H·∫øt ph·∫ßn fetchOptions ---

      // B·∫Øt ƒë·∫ßu g·ªçi $fetch
      return $fetch.raw(monitor.endpoint, fetchOptions)
        .then((response) => {
          let errorMessage: string | null = null
          let responseBodyString: string | null = null
          const isUp = response.ok
          const latency = Date.now() - startTime
          const statusCode = response.status

          // Lu√¥n c·ªë g·∫Øng ƒë·ªçc body
          try {
            responseBodyString = typeof response._data === 'object' ? JSON.stringify(response._data) : String(response._data)
          } catch { /* B·ªè qua n·∫øu kh√¥ng ƒë·ªçc ƒë∆∞·ª£c body */ }

          // G√°n errorMessage n·∫øu !isUp
          if (!isUp) {
            errorMessage = responseBodyString || response.statusText || 'L·ªói HTTP kh√¥ng x√°c ƒë·ªãnh'
          }

          // === KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN C·∫¢NH B√ÅO ===
          const alertConfig = monitor.alertConfig
          const now = Date.now()
          const lastAlertTime = monitor.lastAlertedAt ? new Date(monitor.lastAlertedAt).getTime() : 0
          const canAlert = !lastAlertTime || (now - lastAlertTime > ALERT_COOLDOWN)

          if (alertConfig && canAlert) {
            if (!isUp) { // Downtime (HTTP)
              alertsToSend.push({ monitor, type: 'Downtime', details: `D·ªãch v·ª• kh√¥ng ho·∫°t ƒë·ªông (Status ${statusCode}). L·ªói: ${errorMessage?.substring(0, 100) || 'N/A'}` })
            } else if (alertConfig.latencyThreshold != null && latency > alertConfig.latencyThreshold) { // Latency (Ki·ªÉm tra != null)
              alertsToSend.push({ monitor, type: 'Latency Cao', details: `ƒê·ªô tr·ªÖ ${latency}ms v∆∞·ª£t ng∆∞·ª°ng ${alertConfig.latencyThreshold}ms.` })
            } else if (alertConfig.responseBodyCheck && responseBodyString && responseBodyString.includes(alertConfig.responseBodyCheck)) { // Body Content
              alertsToSend.push({ monitor, type: 'N·ªôi dung Body', details: `Ph·∫£n h·ªìi ch·ª©a n·ªôi dung kh√¥ng mong mu·ªën: "...${alertConfig.responseBodyCheck}..."` })
            }
          }
          // ==========================================

          return {
            status: 'fulfilled', // K·∫øt qu·∫£ c·ªßa Promise
            value: { monitor, latency, statusCode, isUp, errorMessage: errorMessage ? errorMessage.substring(0, 500) : null }
          }
        })
        .catch((error) => {
          const latency = Date.now() - startTime
          const errorMessage = error.message.substring(0, 500)
          const statusCode = error.response?.status || 599 // L·ªói network

          // === KI·ªÇM TRA C·∫¢NH B√ÅO DOWNTIME (Do L·ªói Network) ===
          const alertConfig = monitor.alertConfig
          const now = Date.now()
          const lastAlertTime = monitor.lastAlertedAt ? new Date(monitor.lastAlertedAt).getTime() : 0
          const canAlert = !lastAlertTime || (now - lastAlertTime > ALERT_COOLDOWN)

          if (alertConfig && canAlert) {
            alertsToSend.push({ monitor, type: 'Downtime', details: `Kh√¥ng th·ªÉ k·∫øt n·ªëi d·ªãch v·ª• (L·ªói Network). ${errorMessage}` })
          }
          // =========================================================

          console.error(`L·ªói network khi fetch ${monitor.endpoint}:`, error.message)
          return {
            status: 'rejected', // K·∫øt qu·∫£ c·ªßa Promise
            value: { monitor, latency, statusCode, isUp: false, errorMessage } // ƒê·∫ßy ƒë·ªß c√°c tr∆∞·ªùng
          }
        })
    })

    // --- Ch·∫°y ki·ªÉm tra v√† Ghi K·∫øt qu·∫£ ---
    const results = await Promise.allSettled(checkPromises)
    const resultsToInsert: any[] = []
    const timestamp = new Date()

    results.forEach((result) => {
      let checkResultData: any
      if (result.status === 'fulfilled') {
        checkResultData = result.value.value
      } else { // status === 'rejected'
        // L·∫•y value t·ª´ reason (theo c·∫•u tr√∫c ƒë√£ return ·ªü catch)
        if (result.reason && result.reason.value) {
          checkResultData = result.reason.value
        } else {
          // Ghi log l·ªói kh√¥ng mong mu·ªën t·ª´ Promise.allSettled
          console.error('[Cron] L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω k·∫øt qu·∫£ promise:', result.reason)
          return // B·ªè qua k·∫øt qu·∫£ l·ªói n√†y
        }
      }

      if (checkResultData) {
        const { monitor, latency, statusCode, isUp, errorMessage } = checkResultData
        // ƒê·∫£m b·∫£o monitor._id, v√† monitor.projectId t·ªìn t·∫°i
        if (!monitor?._id || !monitor?.projectId) {
          console.error('[Cron] Thi·∫øu ID trong d·ªØ li·ªáu monitor khi ghi k·∫øt qu·∫£:', monitor)
          return // B·ªè qua b·∫£n ghi l·ªói n√†y
        }
        resultsToInsert.push({
          timestamp: timestamp,
          meta: {
            monitorId: monitor._id,
            projectId: monitor.projectId, // Project ch·ª©a monitor
            location: 'default'
          },
          latency: latency,
          statusCode: statusCode,
          isUp: isUp,
          errorMessage: errorMessage
        })

        // ƒê√°nh d·∫•u monitor c·∫ßn update lastAlertedAt
        if (alertsToSend.some(alert => alert.monitor._id.equals(monitor._id))) {
          if (!monitorsToUpdateLastAlerted.includes(monitor._id.toString())) {
            monitorsToUpdateLastAlerted.push(monitor._id.toString())
          }
        }
      }
    })

    // Ghi k·∫øt qu·∫£ v√†o DB
    if (resultsToInsert.length > 0) {
      try {
        await Result.insertMany(resultsToInsert, { ordered: false })
      } catch (dbError) {
        console.error(`[Cron] L·ªói insertMany k·∫øt qu·∫£:`, dbError)
      }
    }
    console.log(`[Cron] Ho√†n th√†nh ki·ªÉm tra ${monitorsToRun.length} monitors. ƒê√£ ghi ${resultsToInsert.length} k·∫øt qu·∫£.`)

    // --- G·ª¨I C√ÅC C·∫¢NH B√ÅO ---
    if (alertsToSend.length > 0) {
      console.log(`[Cron] ƒêang g·ª≠i ${alertsToSend.length} c·∫£nh b√°o...`)
      const alertPromises = alertsToSend.map(async (alert) => {
        const { monitor, type, details } = alert
        const channels = monitor.alertConfig?.channels || []

        for (const channel of channels) {
          try {
            const payload = {
              text: `üö® C·∫£nh b√°o Headless Sentry: [${monitor.name}] ${type}\nChi ti·∫øt: ${details}\nURL: ${monitor.endpoint}`
            }
            await ofetch(channel.url, { method: 'POST', body: payload, headers: { 'Content-Type': 'application/json' }, retry: 0 })
            console.log(`[Cron] ƒê√£ g·ª≠i c·∫£nh b√°o "${type}" cho "${monitor.name}" t·ªõi ${new URL(channel.url).hostname}`)
          } catch (webhookError: any) {
            console.error(`[Cron] L·ªói g·ª≠i webhook t·ªõi ${channel.url} cho "${monitor.name}":`, webhookError.message)
          }
        }
      })
      await Promise.allSettled(alertPromises)

      // --- C·∫≠p nh·∫≠t lastAlertedAt ---
      if (monitorsToUpdateLastAlerted.length > 0) {
        try {
          await Monitor.updateMany(
            { _id: { $in: monitorsToUpdateLastAlerted.map(id => new mongoose.Types.ObjectId(id)) } },
            { $set: { 'alertConfig.lastAlertedAt': new Date() } }
          )
          console.log(`[Cron] ƒê√£ c·∫≠p nh·∫≠t lastAlertedAt cho ${monitorsToUpdateLastAlerted.length} monitors.`)
        } catch (updateError) {
          console.error('[Cron] L·ªói c·∫≠p nh·∫≠t lastAlertedAt:', updateError)
        }
      }
    }
  }
)
